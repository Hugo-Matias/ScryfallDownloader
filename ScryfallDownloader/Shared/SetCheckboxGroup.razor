@if (!string.IsNullOrWhiteSpace(App.SetFilter) && Sets.Count(s => s.Code.Contains(App.SetFilter.ToLower()) && (s.SetType == Type || string.IsNullOrWhiteSpace(Type))) == 0) return;

<div>
    <lead>@Title</lead>
    <ul class="list-group @(string.IsNullOrWhiteSpace(Type) ? "" : "scroll-group")">
        @foreach (var set in Sets)
        {
            if (!string.IsNullOrEmpty(App.SetFilter) && !set.Code.Contains(App.SetFilter.ToLower())) continue;

            if (App.DownloadSettings.HideUnimplemented && SetState(set.Code) == "set-unimplemented") continue;

            if (string.IsNullOrWhiteSpace(Type) || set.SetType == Type)
            {
                <li class="list-group-item">
                    <input class="form-check-input me-1" type="checkbox" id="@set.Code-check" @oninput="@(async (e) => await OnCheckboxChanged.InvokeAsync(set.Code))" checked="@App.DownloadSettings.Sets.Contains(set.Code)" data-bs-toggle="modal" data-bs-target="#download-cards-modal">
                    <label class="form-check-label @(SetState(set.Code.ToLower()))" for="@set.Code-check"><span class="code">@set.Code.ToUpper()</span> - @set.Name <small>@(!string.IsNullOrWhiteSpace(set.MtgoCode) && set.MtgoCode != set.Code ? $"({set.MtgoCode})" : "")</small></label>
                </li>
            }
        }
    </ul>
    <br />
</div>

@code {
    [CascadingParameter]
    public AppState App { get; set; }

    [Parameter]
    public List<Set> Sets { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public EventCallback<string> OnCheckboxChanged { get; set; }

    private string SetState(string code)
    {
        if (App.ForgeData == null || App.ForgeData.MatchedSets == null) return "";

        // Missing sets from a populated MatchedSets list means that there is no Forge edition available for the Scryfall set being iterated
        if (!App.ForgeData.MatchedSets.Any(s => s.ScryfallCode == code)) return "set-unimplemented";

        var set = App.ForgeData.MatchedSets.First(s => s.ScryfallCode == code);

        if (set.ForgeCount == 0) return "set-empty";

        switch (set.State)
        {
            case MatchedSetState.Equal:
                return "set-equal";

            case MatchedSetState.Missing:
                return "set-missing";

            case MatchedSetState.Extra:
                return "set-extra";

            default:
                return "";
        }
    }
}
