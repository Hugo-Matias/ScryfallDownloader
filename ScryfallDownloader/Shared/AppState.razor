@inject ScryfallApiClient Api
@inject CardDownloaderService Downloader
@inject IOService IO
@inject ImageService Image
@inject ForgeService Forge
@inject DataService DB

<CascadingValue Value="@this">
    <CascadingValue Value="@state">
        @ChildContent
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public DownloadSettingsModel DownloadSettings { get; set; } = new();
    public ForgeDataModel ForgeData { get; set; } = new();
    public List<ScryfallApi.Client.Models.Set> AllSets { get; set; } = new();
    public string SetFilter { get; set; } = "";

    private Dictionary<string, List<string>> _duplicatePrints = new();
    private string _currentSet;
    private DownloadStates state = new();

    protected override async Task OnInitializedAsync()
    {
        DownloadSettings.ImagesPath = @"E:\Jogos\Magic the Gathering\Forge\data\cache\pics\cards";
        DownloadSettings.EditionsPath = @"E:\Jogos\Magic the Gathering\Forge\res\editions";
        Forge.SetPaths(DownloadSettings.ImagesPath, DownloadSettings.EditionsPath);

        //await Forge.GetCardsData();
        await GetAllSets();
        await AuditSets();
    }

    private async Task GetAllSets()
    {
        var result = await Api.Sets.Get();
        AllSets = new List<ScryfallApi.Client.Models.Set>(result.Data);
    }

    public async Task AuditSets()
    {
        if (AllSets == null) await GetAllSets();

        await Forge.AuditSets(ForgeData, AllSets);
    }

    public async Task AuditCards(string code)
    {
        await Forge.AuditCards(ForgeData, code, DownloadSettings.RedownloadData, DownloadSettings.IgnoreFoil, DownloadSettings.IgnoreVariations, DownloadSettings.IgnoreNonEnglish);
    }

    public void RemoveAuditedSet(string code)
    {
        if (ForgeData.ImplementedCards.Count == 0 && ForgeData.MissingCards.Count == 0) return;

        if (ForgeData.ImplementedCards.Count > 0)
            ForgeData.ImplementedCards = ForgeData.ImplementedCards.Where(c => c.Set != code).ToList();

        if (ForgeData.MissingCards.Count > 0)
            ForgeData.MissingCards = ForgeData.MissingCards.Where(c => c.Set != code).ToList();
    }

    private List<string> _multiFacedLayouts = new List<string>() { "transform", "modal_dfc", "reversible_card", "flip" };

    public async Task DownloadImages()
    {
        DownloadSettings.Cards = ForgeData.ImplementedCards;
        if (DownloadSettings.DownloadMissing) DownloadSettings.Cards.AddRange(ForgeData.MissingCards);

        state.CurrentCard = 0;
        state.TotalCards = DownloadSettings.Cards.Count();
        state.IsDownloading = true;

        _currentSet = DownloadSettings.Cards[0].Set;
        var setPath = CheckDirectory(_currentSet);

        foreach (var card in DownloadSettings.Cards)
        {
            state.CurrentCardName = $"{card.Name} | {card.Set.ToUpper()}";
            state.CurrentCard++;

            if (_currentSet != card.Set) setPath = CheckDirectory(card.Set);

            var saveFormat = ParseFormat();

            if (_multiFacedLayouts.Contains(card.Layout) && card.CardFaces != null)
            {
                foreach (var face in card.CardFaces)
                {
                    var cardPath = Path.Combine(setPath, $"{ParseCardName(card, face)}.full.{saveFormat}");
                    Dictionary<string, Uri> imageUris;

                    // Flip cards have 2 card faces for each orientation but only 1 imageuris list
                    // We need to use the card.ImageUris instead and also re-save and rotate the image for the second face
                    var rotate = false;
                    if (card.Layout == "flip")
                    {
                        imageUris = card.ImageUris;
                        if (card.CardFaces[1] == face) rotate = true;
                    }
                    else
                        imageUris = face.ImageUris;

                    if (DownloadSettings.InstantDownload)
                        SaveImage(imageUris, cardPath, card.HighresImage, rotate);
                    else
                        await SaveImage(imageUris, cardPath, card.HighresImage, rotate);
                }
            }
            else
            {
                var cardPath = Path.Combine(setPath, $"{ParseCardName(card)}.full.{saveFormat}");

                if (DownloadSettings.InstantDownload)
                    SaveImage(card.ImageUris, cardPath, card.HighresImage);
                else
                    await SaveImage(card.ImageUris, cardPath, card.HighresImage);
            }
        }

        state.IsDownloading = false;
        _duplicatePrints.Clear();
        DownloadSettings.Cards.Clear();
        ForgeData.ImplementedCards.Clear();
        ForgeData.MissingCards.Clear();
    }

    private async Task SaveImage(Dictionary<string, Uri> uris, string path, bool highres, bool rotate = false)
    {
        if (File.Exists(path) && DownloadSettings.IgnoreExisting) return;

        var format = DownloadSettings.PngHighresOnly && DownloadSettings.Format == "png" && !highres ? "border_crop" : DownloadSettings.Format;
        if (uris == null || uris[format] == null) return;

        var data = await Downloader.DownloadImage(uris[format].AbsoluteUri);

        if (DownloadSettings.ConvertToJpg && format == "png") data = Image.ConvertToJpg(data, DownloadSettings.OutputQuality);

        if (rotate) data = Image.Rotate180(data);

        await IO.SaveFile(path, data);
    }

    private string CheckDirectory(string scryfallSet)
    {
        // TODO: Get appropriate Set code directory for the rare cases where multiple Forge editions match to a single Scryfall set (MED and TD0).
        var set = ForgeData.MatchedSets.FirstOrDefault(s => s.ScryfallCode == scryfallSet, null);

        // Null MatchedSet means it's unimplemented in Forge,
        // Using the argument's code to create a directory following Scryfall we can download the cards anyway,
        // This is useful for token like cards (eg. Archenemy Schemes or AFR Dungeons).
        var code = set != null ? set.ForgeCode : scryfallSet;

        var path = Path.Combine(DownloadSettings.ImagesPath, code);

        if (Directory.Exists(path) && DownloadSettings.RemoveExisting)
            Directory.Delete(path, true);

        IO.CreateDirectory(path);

        _currentSet = scryfallSet;

        return path;
    }

    private string ParseFormat() => (DownloadSettings.Format != "png" || DownloadSettings.ConvertToJpg) ? "jpg" : "png";

    private string ParseCardName(ScryfallApi.Client.Models.Card card, CardFace? face = null)
    {
        var cardName = face == null ? card.Name : face.Name;

        // Adventure layout cards will include both faces names separated by " // ",
        // Forge will only use the first face's name, the text written on the top of the card.
        if (card.Layout == "adventure" && cardName.Contains(" // ")) cardName = cardName.Split(" // ")[0];

        if (DownloadSettings.Cards.Count(c => c.Name == card.Name && c.Set == card.Set) > 1)
        {
            if (!_duplicatePrints.ContainsKey(card.Set)) _duplicatePrints.Add(card.Set, new List<string>());

            _duplicatePrints[card.Set].Add(cardName);

            var count = _duplicatePrints[card.Set].Count(c => c == cardName);

            cardName = cardName + count;
        }

        return cardName.ParseCardname(true);
    }

    public async Task InitializeDatabase(bool redownloadData = false)
    {
        var settings = await DB.LoadSettings();
        if (Forge.Cards == null || Forge.Cards.Count == 0) await Forge.GetCardsData(redownloadData);

        var setIndex = 0;
        foreach (var set in AllSets.OrderBy(s => s.ReleaseDate).ToList())
        {
            setIndex++;
            if (setIndex < settings.ImportSet) continue;
            Console.WriteLine($"\n\nCreating Set {setIndex}/{AllSets.Count}: {set.Code.ToUpper()} | {set.Name}\n");

            var setEntity = await DB.GetSet(set.Code);
            if (setEntity != null)
            {
                await CreateSetCards(setEntity, setIndex);
                settings.ImportSet = setIndex;
                await DB.SaveSettings(settings);
                continue;
            }

            setEntity = new Data.Set();

            setEntity.Name = set.Name;
            setEntity.Code = set.Code;

            var forgeSet = ForgeData.MatchedSets.FirstOrDefault(s => s.ScryfallCode == set.Code, null);
            if (forgeSet != null) setEntity.ForgeCode = forgeSet.ForgeCode;

            if (set.ReleaseDate != null) setEntity.ReleaseDate = DateOnly.FromDateTime((DateTime)set.ReleaseDate);

            var setType = await DB.GetSetType(set.SetType);
            if (setType == null) setEntity.SetType = new Data.SetType() { Name = set.SetType };
            else setEntity.SetType = setType;

            var createdSetEntity = await DB.Create(setEntity);
            await CreateSetCards(createdSetEntity, setIndex);

            settings.ImportSet = setIndex;
            await DB.SaveSettings(settings);
        }
    }

    private async Task CreateSetCards(Data.Set set, int setIndex)
    {
        var setCards = Forge.Cards.Where(c => c.Set == set.Code);
        var cardTotal = setCards.Count();
        var cardIndex = 0;
        List<Data.Card> cards = new();
        foreach (var setCard in setCards)
        {
            cardIndex++;
            Console.WriteLine($"{setIndex}||{cardIndex}/{cardTotal}: {setCard.Name}");

            var card = new Data.Card();

            card.Name = setCard.Name;
            card.SetId = set.SetId;
            card.CollectorsNumber = setCard.CollectorNumber;
            card.Rarity = new Rarity() { Name = setCard.Rarity, Symbol = setCard.Rarity.ToUpper()[0] };
            card.Artist = new Artist() { Name = setCard.Artist };
            card.Layout = setCard.Layout;
            card.ConvertedManaCost = setCard.Cmc;
            card.IsHighres = setCard.HighresImage;
            if (setCard.CardFaces == null || setCard.CardFaces.Length == 0 || setCard.Layout.ToLower() == "flip")
                card.ImageUrl = setCard.HighresImage ? setCard.ImageUris["png"] : setCard.ImageUris["normal"];
            if (setCard.CardFaces != null && setCard.CardFaces.Length > 0) card.Type = $"{setCard.CardFaces[0].TypeLine}{(setCard.CardFaces[0].TypeLine != setCard.CardFaces[1].TypeLine ? $" | {setCard.CardFaces[1].TypeLine}" : "")}";
            else card.Type = setCard.TypeLine;
            card.ManaCost ??= setCard.ManaCost;
            card.Power ??= setCard.Power;
            card.Toughness ??= setCard.Toughness;
            card.Loyalty ??= setCard.Loyalty;
            card.LifeModifier ??= setCard.LifeModifier;
            card.HandModifier ??= setCard.HandModifier;
            card.IsImplemented = CheckForgeImplementation(setCard.Name);

            if (setCard.Keywords != null)
            {
                card.Keywords = new List<CardKeyword>();
                foreach (var setCardKeyword in setCard.Keywords)
                {
                    var keyword = await DB.Create(new Keyword() { Name = setCardKeyword });
                    card.Keywords.Add(new CardKeyword() { Card = card, KeywordId = keyword.KeywordId });
                }
            }

            if (setCard.Colors != null)
            {
                card.Colors = new List<CardColor>();
                foreach (var setCardColor in setCard.Colors)
                {
                    var color = await DB.Create(new Color() { Symbol = setCardColor, Name = setCardColor.ParseColorName() });
                    card.Colors.Add(new CardColor() { Card = card, ColorId = color.ColorId });
                }
            }

            if (setCard.ProducedMana != null)
            {
                card.ProducedColors = new List<CardGenerateColor>();
                foreach (var mana in setCard.ProducedMana)
                {
                    var color = await DB.Create(new Color() { Symbol = mana, Name = mana.ParseColorName() });
                    card.ProducedColors.Add(new CardGenerateColor() { Card = card, ColorId = color.ColorId });
                }
            }

            //cards.Add(card);
            //var createdCardEntity = await DB.Create(cardEntity);
            await DB.AddCardToSet(set.SetId, card);
        }
        //await DB.AddCardsToSet(set.SetId, cards);
    }

    private bool CheckForgeImplementation(string cardName)
    {
        // Check for flip cards where both parts of the name are relevant but Forge ignores the separator characters (eg. Wear // Tear => WearTear)
        var isImplemented = ForgeData.Editions.Any(e => e.Cards.Any(c => c.Name.ParseCardname().Contains(cardName.ParseCardname())));

        // Check for double faced cards where only the first part of the name is relevant (eg. Thing in the Ice // Awoken Horror => Thing in the Ice)
        if (!isImplemented)
            isImplemented = ForgeData.Editions.Any(e => e.Cards.Any(c => c.Name.ParseSplitCardname().Contains(cardName.ParseSplitCardname())));

        return isImplemented;
    }

    public async Task RecheckCardImplementation()
    {
        var cards = await DB.GetUnimplementedCards();

        foreach (var card in cards)
        {
            var implementation = CheckForgeImplementation(card.Name);

            if (implementation != card.IsImplemented)
            {
                Console.WriteLine($"{card.Name}");
                await DB.UpdateCardImplementation(card.CardId, implementation);
            }
        }
    }
}
