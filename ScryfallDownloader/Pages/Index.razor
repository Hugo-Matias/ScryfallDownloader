@page "/downloader"

<PageTitle>Set Downloader</PageTitle>

<Settings Model="App.DownloadSettings" OnSortBy="ToggleSorting" OnSubmit="Download" OnSearchChanged="FilterSets" OnHideChanged="StateHasChanged"></Settings>

<div class="col title">
    <h1>Scryfall Sets</h1>
    <span><small>@(string.Join(" | ", App.DownloadSettings.Sets))</small></span>
</div>
<br />
<div class="container d-flex">
    @if (_groupByType)
    {
        <div class="col-4 me-3">
            @foreach (var edition in _group1)
            {
                <SetCheckboxGroup Sets="App.AllSets" OnCheckboxChanged="UpdateDownloadSets" Title="@edition.Item1" Type="@edition.Item2" />
            }
        </div>
        <div class="col-4 me-3">
            @foreach (var edition in _group2)
            {
                <SetCheckboxGroup Sets="App.AllSets" OnCheckboxChanged="UpdateDownloadSets" Title="@edition.Item1" Type="@edition.Item2" />
            }
        </div>
        <div class="col-4 me-3">
            @foreach (var edition in _group3)
            {
                <SetCheckboxGroup Sets="App.AllSets" OnCheckboxChanged="UpdateDownloadSets" Title="@edition.Item1" Type="@edition.Item2" />
            }
        </div>
    }
    else
    {
        <SetCheckboxGroup Sets="App.AllSets" OnCheckboxChanged="UpdateDownloadSets" Title="Release Date" Type="" />
    }
</div>

<DownloadCardsModal SetCode="@_selectedSetCode"></DownloadCardsModal>

@code {
    [CascadingParameter]
    public AppState App { get; set; }

    // (Checkbox Group Title, Scryfall SetType)
    private List<(string, string)> _group1 = new() { ("Core", "core"), ("Alchemy", "alchemy"), ("From The Vault", "from_the_vault"), ("Duel Decks", "duel_deck"), ("Commander", "commander"), ("Vanguard", "vanguard"), ("Box", "box") };

    private List<(string, string)> _group2 = new() { ("Expansions", "expansion"), ("Masterpiece", "masterpiece"), ("Spellbook", "spellbook"), ("Draft", "draft_innovation"), ("Planechase", "planechase"), ("Funny", "funny"), ("Promo", "promo") };

    private List<(string, string)> _group3 = new() { ("Masters", "masters"), ("Arsenal", "arsenal"), ("Premium Deck", "premium_deck"), ("MTGO Treasure Chest", "treasure_chest"), ("Archenemy", "archenemy"), ("Starter", "starter"), ("Memorabilia", "memorabilia"), ("Tokens", "token") };

    private bool _groupByType = true;
    private string _selectedSetCode = "SET CODE";

    private async Task UpdateDownloadSets(string code)
    {
        if (App.DownloadSettings.Sets.Contains(code))
        {
            App.DownloadSettings.Sets.Remove(code);
            App.RemoveAuditedSet(code);
        }
        else
        {
            App.DownloadSettings.Sets.Add(code);
            await App.AuditCards(code);
        }
        _selectedSetCode = code;
    }

    private void FilterSets(ChangeEventArgs e)
    {
        App.SetFilter = e.Value.ToString() ?? "";
        StateHasChanged();
    }

    private void ToggleSorting()
    {
        _groupByType = !_groupByType;
        StateHasChanged();
    }

    private Task AuditSets() => App.AuditSets();

    private async Task Download()
    {
        //await App.GetCards();
        await App.DownloadImages();
        App.DownloadSettings.Sets.Clear();
        await AuditSets();
        StateHasChanged();
    }
}
