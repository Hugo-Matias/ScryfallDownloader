@page "/"

<PageTitle>Index</PageTitle>

<Settings Model="App.DownloadSettings" OnSubmit="Download" OnSearchChanged="FilterSets"></Settings>

<div class="col title">
    <h1>Sets</h1>
    <span><small>@(string.Join(" | ", App.DownloadSettings.Sets))</small></span>
</div>
<br />
<div class="container d-flex">
    <div class="col-4 me-3">
        @foreach (var edition in _group1)
        {
            <SetCheckboxGroup Sets="App.Sets" OnCheckboxChanged="UpdateDownloadSets" Title="@edition.Item1" Type="@edition.Item2"/>
        }
    </div>
    <div class="col-4 me-3">
        @foreach (var edition in _group2)
        {
            <SetCheckboxGroup Sets="App.Sets" OnCheckboxChanged="UpdateDownloadSets" Title="@edition.Item1" Type="@edition.Item2"/>
        }
    </div>
    <div class="col-4 me-3">
        @foreach (var edition in _group3)
        {
            <SetCheckboxGroup Sets="App.Sets" OnCheckboxChanged="UpdateDownloadSets" Title="@edition.Item1" Type="@edition.Item2"/>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public AppState App { get; set; }

    // (Checkbox Group Title, Scryfall SetType)
    private List<(string, string)> _group1 = new() { ("Core", "core"), ("Alchemy", "alchemy"), ("From The Vault", "from_the_vault"), ("Duel Decks", "duel_deck"), ("Commander", "commander"), ("Vanguard", "vanguard"), ("Box", "box"), ("Memorabilia", "memorabilia") };

    private List<(string, string)> _group2 = new() { ("Expansions", "expansion"), ("Masterpiece", "masterpiece"), ("Spellbook", "spellbook"), ("Draft", "draft_innovation"), ("Planechase", "planechase"), ("Funny", "funny"), ("Promo", "promo") };

    private List<(string, string)> _group3 = new() { ("Masters", "masters"), ("Arsenal", "arsenal"), ("Premium Deck", "premium_deck"), ("MTGO Treasure Chest", "treasure_chest"), ("Archenemy", "archenemy"), ("Starter", "starter"), ("Tokens", "token") };

    private void UpdateDownloadSets(string code)
    {
        if (App.DownloadSettings.Sets.Contains(code))
            App.DownloadSettings.Sets.Remove(code);
        else
            App.DownloadSettings.Sets.Add(code);
    }

    private void FilterSets(ChangeEventArgs e)
    {
        App.SetFilter = e.Value.ToString() ?? "";
        StateHasChanged();
    }

    private async Task Download()
    {
        await App.GetCards();
        await App.DownloadImages();
    }
}
